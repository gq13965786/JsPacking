// standard requires
var fs = require("fs");
var util = require("util");
var path = require("path");
var cp = require("child_process");
var os = require("os");
// constant variable
var DEFAULT_OUTPUT = "../ape-engine.js";
var DEFAULT_TEMP = "_tmp";
var SRC_DIR = "../";
var COMPILER_LEVEL = [
  'WHITESPACE_ONLY',
  'SIMPLE',
  'ADVANCED'
];
// signed variable
var debug = false;
var profiler = false;
var outputPath = DEFAULT_OUTPUT;
var tempPath = DEFAULT_TEMP;
var compilerLevel = COMPILER_LEVEL[0]
var formattingLevel = undefined;
//only run from build directory
var cwd = process.cwd();
///pre condition
if (!fs.existsSync(cwd + '/build.js')) {
  console.error("run build script from build directory");
  process.exit(1);
}
try {
  var fse = require("fs-extra");
} catch (e) {
  console.error("Missing dependency: 'npm install fs-extra'");
  process.exit(1);
}

try{
  var ClosureCompiler = require("google-closure-compiler").compiler;
} catch (e) {
  console.error("Missing dependency: 'npm install google-closure-compiler'");
  process.exit(1);
}

try{
  var Preprocessor = require("preprocessor");
} catch (e) {
  console.error("Missing dependency: 'npm install preprocessor'");
  process.exit(1);
}
//var function
if (!String.prototype.endsWith){
  String.prototype.endsWtih = function(searchString, position) {
    var subjectString = this.toString();
    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
      position = subjectString.length;
    }
    position -= searchString.length;
    var lastIndex = subjectString.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };
}
var loadDependencies = function(fullpath, callback){
  fs.readFile(fullpath, function (err, data){
    if(err) callback(err);
    callback(data.toString().trim().split(new RegExp("[\\r\\n]+",'g')));
  });
};
var replaceAll = function(target, search, replacement) {
    return target.replace(new RegExp(search, 'g'), replacement);
};
var concatentateShaders = function (callback) {
    output = '../src/graphics/program-lib/chunks/generated-shader-chunks.js';
    dir = '../src/graphics/program-lib/chunks/';

    fd = fs.openSync(output, 'w');

    fs.writeSync(fd, "// autogenerated at: " + new Date() + "\n");
    fs.readdir(dir, function (err, files) {
        files.forEach(function (file) {
            var ext = null;
            ext = file.endsWith(".vert") ? "VS" : ext;
            ext = file.endsWith(".frag") ? "PS" : ext;
            if (ext) {
                var fullpath = dir + file;

                var content = replaceAll(fs.readFileSync(fullpath).toString(), "[\\r\\n]+", "\\n");
                var name = file.split(".")[0] + ext;
                var data = util.format('ape.shaderChunks.%s = "%s";\n', name, content);
                fs.writeSync(fd, data);
            }
        });

        callback();
    });
};
///////////////---main----/////////////////
arguments();
run();
//procedure function
function preprocess(dependencies){
  // make temp dir and clear
  if (directoryExists(tempPath)) {
      fse.removeSync(tempPath);
  }

  var dependenciesOut = [];
  dependencies.forEach(function (filepath) {
      var relpath = path.relative(SRC_DIR, filepath);
      var _out = path.join(tempPath, relpath);

      var buffer = fs.readFileSync(filepath);

      var pp = new Preprocessor(buffer.toString());
      var src = pp.process({
          PROFILER: profiler || debug,
          DEBUG: debug
      });

      var dir = path.dirname(_out);
      fse.ensureDirSync(dir);

      fs.writeFileSync(_out, src);

      dependenciesOut.push(_out);
  });

  return dependenciesOut;
}
function cleanup(){
  if (directoryExists(tempPath)){
    fse.removeSync(tempPath);
  }
}
function directoryExists(path){
  try {
    return fs.statSync(path).isDirectory();
  } catch (err){
    return false;
  }
}
function arguments(){
  var _last = null;

process.argv.forEach(function (arg) {
    if (arg === '-h') {
        console.log("Build Script for Ape Engine\n");
        console.log("The engine is under construction, may not be ready yet\n")
        console.log("Usage: node build.js -l [COMPILER_LEVEL] -o [OUTPUT_PATH]\n");
        console.log("Arguments:");
        console.log("-h: show this help");
        console.log("-l COMPILER_LEVEL: Set compiler level");
        console.log("\t0: WHITESPACE_ONLY [default]");
        console.log("\t1: SIMPLE");
        console.log("\t2: ADVANCED OPTIMIZATIONS");
        console.log("-o PATH: output file path [output/playcanvas-latest.js]");
        console.log("-d: build debug engine configuration");
        console.log("-p: build profiler engine configuration");
        process.exit();
    }

    if (arg === '-d') {
        debug = true;
    }

    if (arg === '-p') {
        profiler = true;
    }

    if (_last === '-l') {
        var level = parseInt(arg, 10);
        if (!(level >= 0 && level <= 2)) {
            console.error("Invalid compiler level (-l) should be: 0, 1 or 2.");
            process.exit(1);
        }
        compilerLevel = COMPILER_LEVEL[level];
    }

    if (_last === '-o') {
        outputPath = arg;
    }

    _last = arg;
});
}
function run(){
  var start = new Date().getTime();
    //concatentateShaders(function (err) {
      loadDependencies("./dependencies.txt", function (lines) {
          // preprocess and get new dependency list
          var files = preprocess(lines);

          //console.log("start----\n");
    			//console.log(files);
    			//console.log("end------\n");

          // set compiler options
          var options = {
            js: files,
            compilation_level: compilerLevel,
            language_in: "ECMASCRIPT5",
            js_output_file: outputPath,
            output_wrapper_file: "./umd-wrapper.js",
            manage_closure_dependencies: true,
            jscomp_off: [
                "nonStandardJsDocs",  // docs warnings
                "checkTypes", // array types and other missing types
                "misplacedTypeAnnotation", // temp: hide docs using @type on defineProperty
                "globalThis", // temp: remove this again
                "suspiciousCode" // temp: remove this again
            ],
            externs: "externs.js",
            warning_level: "VERBOSE"
          };

          if (compilerLevel === "WHITESPACE_ONLY") {
              options.formatting = "pretty_print";
          }
          var closureCompiler = new ClosureCompiler(options);

          // compile
          var compilerProcess = closureCompiler.run(function(exitCode, stdOut, stdErr) {

              if (exitCode) {
                  console.error(stdErr);
                  process.exit(exitCode);
              } else {
                  if (stdErr) console.error(stdErr);
                  // print compiler output
                  if (stdOut) console.log(stdOut);

                      cleanup();

                      // done
                      var time = (new Date().getTime() - start) / 1000;
                      console.log("Build completed in " + time + " seconds!");
                      process.exit(0);

                  }

            });
        });
    //});
}
